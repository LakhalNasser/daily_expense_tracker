رائع يوسف!
بما أنك اخترت **Flutter**، واستعمال **JSON كقاعدة بيانات** مع **إمكانية رفع صور/تصوير المنتج**، سأبني لك الآن مشروعًا كاملًا بفكرة احترافية وشاملة، مع:

---

## 📁 الناتج:

1. **🔧 PRD - Product Requirements Document (وثيقة مواصفات المنتج)**
2. **✅ Checklist Task File - قائمة مرجعية تفصيلية للتنفيذ (لك وللذكاء الاصطناعي Copilot/GPT)**

---

## 📌 فكرة المشروع المقترحة:

### **Product Expense Tracker**

تطبيق Flutter يسمح للمستخدم بتتبع مصاريف المنتجات مع إمكانية:

* تسجيل منتج + التصنيف + المبلغ + التاريخ + ملاحظات
* رفع صورة للمنتج (من الكاميرا أو المعرض)
* تخزين البيانات في ملف JSON محلي
* عرض إحصائيات ورسوم بيانية
* واجهة احترافية قابلة للتوسعة

---

## 📄 1. PRD: وثيقة متطلبات التطبيق (Product Requirements Document)

````md
# 📄 Product Requirements Document (PRD)

## 🧠 اسم المشروع:
Product Expense Tracker

## 🎯 الهدف:
تطوير تطبيق Flutter بسيط واحترافي يسمح بتسجيل وتتبع مصاريف المنتجات اليومية مع إمكانية رفع صورة المنتج، تصنيفه، وتحليل الإحصائيات، وتخزين البيانات بشكل محلي باستخدام JSON.

---

## 🧑‍💻 الفئة المستهدفة:
- الطلاب
- العاملون لحسابهم الخاص
- أصحاب المشاريع الصغيرة
- الأشخاص الراغبون في تنظيم مشترياتهم

---

## 📱 الميزات الأساسية:

### 1. إضافة منتج (Add Product)
- اسم المنتج
- مبلغ المصروف
- تصنيف (أكل، لوجستيك، فواتير، إلخ)
- ملاحظات (اختيارية)
- صورة المنتج (كاميرا أو معرض)
- تاريخ الشراء

### 2. عرض قائمة المنتجات
- قائمة بكل المنتجات المضافة
- فرز حسب التصنيف أو التاريخ أو السعر
- تعديل / حذف منتج

### 3. إحصائيات
- إجمالي المصاريف حسب التصنيف
- رسوم بيانية حسب التاريخ (يومي / شهري)

### 4. إعدادات
- اختيار العملة
- مسح كل البيانات
- اختيار الوضع الداكن

---

## 📦 التقنيات المستعملة:

| التقنية | الغرض |
|--------|-------|
| Flutter | تطوير الواجهة الأمامية |
| `path_provider` | تحديد مسار تخزين ملف JSON |
| `image_picker` | التقاط الصور من الكاميرا أو اختيارها من المعرض |
| `charts_flutter` | عرض الإحصائيات البيانية |
| `json_serializable` | تحويل الـ JSON إلى كائنات Dart والعكس |
| `shared_preferences` | تخزين الإعدادات (الوضع الليلي، العملة) |
| `file_picker` (اختياري) | استيراد/تصدير بيانات JSON |

---

## 🗂️ هيكل البيانات (JSON)

```json
[
  {
    "id": "uuid",
    "name": "حاسوب",
    "amount": 120000,
    "category": "الكترونيات",
    "notes": "مواصفات قوية",
    "imagePath": "file://.../product_1.jpg",
    "date": "2025-07-04T14:30:00"
  },
  ...
]
````

---

## 🔗 العلاقات (ضمنية):

* المنتج (Product) يحتوي على:

  * اسم، سعر، تاريخ، تصنيف، صورة، ملاحظات
* التصنيفات يتم تحديدها من المستخدم
* كل منتج يرتبط بتصنيف (many-to-one)

---

## 🚀 قابلية التوسعة مستقبلاً:

* تصدير البيانات PDF/Excel
* مزامنة مع Google Drive
* دعم واجهات باللغتين (AR/EN)
* سجل يومي تلقائي للمصاريف

````

---

## 📋 2. Checklist - قائمة المهام التفصيلية (Task List for Copilot/GPT & Git Branching)

```md
# ✅ Task List (Git branches + Checklist per feature)

---

## 🌱 0. التهيئة - feature/setup
- [ ] إنشاء مشروع Flutter
- [ ] إضافة تبعيات pubspec.yaml:
  - `image_picker`
  - `path_provider`
  - `charts_flutter`
  - `shared_preferences`
  - `uuid`
- [ ] إنشاء مجلدات:
  - `/models`
  - `/services`
  - `/screens`
  - `/widgets`
  - `/utils`
  - `/data` (لحفظ ملف JSON داخله)

---

## ➕ 1. إضافة منتج - feature/add-product-ui
- [ ] تصميم واجهة إضافة منتج:
  - [ ] حقل الاسم
  - [ ] المبلغ (رقمي)
  - [ ] Dropdown للتصنيف
  - [ ] ملاحظات
  - [ ] اختيار التاريخ
  - [ ] رفع أو التقاط صورة
  - [ ] زر حفظ
- [ ] التحقق من الحقول الفارغة
- [ ] تخزين البيانات في ملف JSON

---

## 🧾 2. عرض المنتجات - feature/product-list-ui
- [ ] شاشة تعرض قائمة المنتجات
- [ ] زر تعديل / حذف
- [ ] عرض صورة مصغرة للمنتج
- [ ] فلترة حسب التصنيف أو التاريخ

---

## 📊 3. الإحصائيات - feature/statistics-ui
- [ ] إنشاء صفحة إحصائيات
- [ ] PieChart حسب التصنيف
- [ ] LineChart حسب الوقت
- [ ] إجمالي المصاريف

---

## 🧠 4. نموذج البيانات - feature/json-storage
- [ ] إنشاء `ProductModel` مع json_serializable
- [ ] إنشاء `ProductService` لتحميل / حفظ الملف:
  - `loadProducts()`
  - `saveProducts(List)`
  - `addProduct(Product)`
  - `deleteProduct(id)`
- [ ] حفظ الصور في `/images/` داخل المسار المحلي

---

## ⚙️ 5. الإعدادات - feature/settings
- [ ] شاشة إعدادات بسيطة:
  - [ ] اختيار العملة
  - [ ] تفعيل الوضع الليلي
  - [ ] زر مسح كل البيانات
- [ ] تخزين الإعدادات عبر `shared_preferences`

---

## 📦 6. التوثيق - docs/update-readme
- [ ] كتابة ملف README مفصل
- [ ] إضافة Screenshots
- [ ] توثيق تبعيات المشروع
- [ ] تعليمات تشغيل المشروع

---

## 🧪 7. اختبارات (اختياري) - test/basic-ui
- [ ] اختبار التحقق من الحقول
- [ ] اختبار حفظ البيانات بنجاح
- [ ] اختبار عرض الصورة بشكل صحيح

---

## 📁 هيكل الملفات:

```bash
/lib
├── models/
│   └── product_model.dart
├── services/
│   └── product_service.dart
├── screens/
│   ├── home_screen.dart
│   ├── add_product_screen.dart
│   ├── product_list_screen.dart
│   ├── statistics_screen.dart
│   └── settings_screen.dart
├── widgets/
│   └── product_card.dart
├── utils/
│   └── helpers.dart
├── data/
│   └── products.json
└── main.dart
````

```

---

## هل تريده كملف PDF أو Markdown جاهز للرفع على GitHub؟

إذا أحببت، أقدر نجهزهم لك بصيغة:
- `📄 prd.md`
- `✅ checklist.md`
- وملف `README.md`
- وأرفع لك هيكل المشروع في مجلد .zip

تحب نبدأ مباشرة؟ وإذا عندك تعديلات على الفكرة أو واجهات إضافية، ندمجهم.
```
